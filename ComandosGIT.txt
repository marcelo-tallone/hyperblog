Los comandos de Linux vistos son:

pwd: Nos muestra la ruta de carpetas en la que te encuentras ahora mismo.
mkdir: Nos permite crear carpetas (por ejemplo, mkdir Carpeta-Importante).
touch: Nos permite crear archivos (por ejemplo, touch archivo.txt).
rm: Nos permite borrar un archivo o carpeta (por ejemplo, rm archivo.txt). Mucho cuidado con este comando, puedes borrar todo tu disco duro.
cat: Ver el contenido de un archivo (por ejemplo, cat nombre-archivo.txt).
ls: Nos permite cambiar ver los archivos de la carpeta donde estamos ahora mismo. Podemos usar uno o más argumentos para ver más información sobre estos archivos (los argumentos pueden ser -- + el nombre del argumento o - + una sola letra o shortcut por cada argumento).
- ls -a: Mostrar todos los archivos, incluso los ocultos.
- ls -l: Ver todos los archivos como una lista.
cd: Nos permite navegar entre carpetas.
- cd /: Ir a la ruta principal:
- cd o cd ~: Ir a la ruta de tu usuario
- cd carpeta/subcarpeta: Navegar a una ruta dentro de la carpeta donde estamos ahora mismo.
- cd .. (cd + dos puntos): Regresar una carpeta hacia atrás.
- Si quieres referirte al directorio en el que te encuentras ahora mismo puedes usar cd . (cd + un punto).
history: Ver los últimos comandos que ejecutamos y un número especial con el que podemos repetir su ejecución.
! + número: Ejecutar algún comando con el número que nos muestra el comando history (por ejemplo, !72).
clear: Para limpiar la terminal. También podemos usar los atajos de teclado Ctrl + L o Command + L.

Recuerda que podemos descubrir todos los argumentos de un comando con el argumento --help (por ejemplo, cat --help)

--------------------------------------------------------------------------------------------------------------------------------------
Los comandos de GIT vistos son:

git init                                            (Se utiliza para crear el repositorio local, lo que sería el Master).

git config --list                                   (Muestra las configuraciones de git)
git config                                          (Muestra las configuraciones de git pero mas detalladas)
git config --global user.email "tu@email.com"       (Se usa para setear en git el mail del usuario)
git config --global user.name "Tu Nombre"           (Se usa para setear en git el nombre del usuario)
git config --list --show-origin                     (para mostrar las configuraciones y sus rutas)

Si por algún motivo te equivocaste en el nombre o email que configuraste al principio, lo puedes modificar de la siguiente manera:
git config --global --replace-all user.name “Aquí va tu nombre modificado”
O si lo deseas eliminar y añadir uno nuevo
git config --global --unset-all user.name                   (Elimina el nombre del usuario) 
git config --global --add user.name “Aquí va tu nombre”


git status                                          (Se utiliza para ver el status de los archivos con el repo)
git add <nombre archivo>                            (Te agrega solo el archivo seleccionado para poder commitearlo)
git add .                                           (Te agrega todos los archivos desde esa carpeta para poder commitearlos)
git commit -m "comentario del cambio"               (Se utiliza para commitear los cambios al repo local)


git rm --cached <nombre de archivo>                 (borra el archivo de lo que se agreg[o para subir, quita lo que pone el git add])
git rm -f <nombre de archivo>                       (Quita lo que puso el git add y además borra el archivo de la carpeta)

git log <nombre archivo>                            (Te muestra el historial de los commits de un archivo)
git log                                             (Te muestra el historial de los commits de todos los archivos de esa carpeta)
git log --stat                                      (Muestra el historia de los commita de todos los archivos con detalle del cambio)
cat <nombre archivo>                                (Te muestra el contenido del archivo)

git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

git show <nombre archivo>                           (Te muestra exactamente los cambios que tuvo el archivo)
git diff commitA commitB                            (Te muestra exactamente los cambios entre dos commits diferentes, los obtienes con el git log)
git diff                                            (Muestra los cambios entre el staging y lo que no se subio en disco)

git reset <#commit> --hard                          (vuelve a la version del commit indicada borrando todo el historial y todo)
git reset <#commit> --soft                          (vuelve a la version del commit indicada borrando todo el historial y todo excepto el staging)

git checkout <#commit> <Nombre Archivo>             (volves en tu local a la version de commit que pongas sin borrar nada del historial)
git checkout master <Nombre Archivo>                (volves en tu local a la utima version que habias subido al master)


git branch -nombre de la rama-: Con este comando se genera una nueva rama.
git checkout -nombre de la rama-: Con este comando puedes saltar de una rama a otra.
git checkout -b rama: Genera una rama y nos mueve a ella automáticamente, Es decir, es la combinación de git brach y git checkout al mismo tiempo.
git reset id-commit: Nos lleva a cualquier commit no importa la rama, ya que identificamos el id del tag., eliminando el historial de los commit posteriores al tag seleccionado.
git checkout rama-o-id-commit: Nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado.


--------------------------------------------------------------------------------------------------------------------
En este ejemplo, vamos a crear un nuevo commit en la rama master combinando los cambios de una rama llamada cabecera:

git checkout master
git merge cabecera

Otra opción es crear un nuevo commit en la rama cabecera combinando los cambios de cualquier otra rama:

git checkout cabecera
git merge cualquier-otra-rama
--------------------------------------------------------------------------------------------------------------------




