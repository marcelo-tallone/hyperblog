Los comandos de Linux vistos son:

pwd: Nos muestra la ruta de carpetas en la que te encuentras ahora mismo.
mkdir: Nos permite crear carpetas (por ejemplo, mkdir Carpeta-Importante).
touch: Nos permite crear archivos (por ejemplo, touch archivo.txt).
rm: Nos permite borrar un archivo o carpeta (por ejemplo, rm archivo.txt). Mucho cuidado con este comando, puedes borrar todo tu disco duro.
cat: Ver el contenido de un archivo (por ejemplo, cat nombre-archivo.txt).
ls: Nos permite cambiar ver los archivos de la carpeta donde estamos ahora mismo. Podemos usar uno o más argumentos para ver más información sobre estos archivos (los argumentos pueden ser -- + el nombre del argumento o - + una sola letra o shortcut por cada argumento).
- ls -a: Mostrar todos los archivos, incluso los ocultos.
- ls -l: Ver todos los archivos como una lista.
cd: Nos permite navegar entre carpetas.
- cd /: Ir a la ruta principal:
- cd o cd ~: Ir a la ruta de tu usuario
- cd carpeta/subcarpeta: Navegar a una ruta dentro de la carpeta donde estamos ahora mismo.
- cd .. (cd + dos puntos): Regresar una carpeta hacia atrás.
- Si quieres referirte al directorio en el que te encuentras ahora mismo puedes usar cd . (cd + un punto).
history: Ver los últimos comandos que ejecutamos y un número especial con el que podemos repetir su ejecución.
! + número: Ejecutar algún comando con el número que nos muestra el comando history (por ejemplo, !72).
clear: Para limpiar la terminal. También podemos usar los atajos de teclado Ctrl + L o Command + L.

Recuerda que podemos descubrir todos los argumentos de un comando con el argumento --help (por ejemplo, cat --help)

--------------------------------------------------------------------------------------------------------------------------------------
Los comandos de GIT vistos son:

git init                                            (Se utiliza para crear el repositorio local, lo que sería el Master).

git config --list                                   (Muestra las configuraciones de git)
git config                                          (Muestra las configuraciones de git pero mas detalladas)
git config --global user.email "tu@email.com"       (Se usa para setear en git el mail del usuario)
git config --global user.name "Tu Nombre"           (Se usa para setear en git el nombre del usuario)
git config --list --show-origin                     (para mostrar las configuraciones y sus rutas)

Si por algún motivo te equivocaste en el nombre o email que configuraste al principio, lo puedes modificar de la siguiente manera:
git config --global --replace-all user.name “Aquí va tu nombre modificado”
O si lo deseas eliminar y añadir uno nuevo
git config --global --unset-all user.name                   (Elimina el nombre del usuario) 
git config --global --add user.name “Aquí va tu nombre”


git status                                          (Se utiliza para ver el status de los archivos con el repo)
git add <nombre archivo>                            (Te agrega solo el archivo seleccionado para poder commitearlo)
git add .                                           (Te agrega todos los archivos desde esa carpeta para poder commitearlos)
git commit -m "comentario del cambio"               (Se utiliza para commitear los cambios al repo local)


git rm --cached <nombre de archivo>                 (borra el archivo de lo que se agreg[o para subir, quita lo que pone el git add])
git rm -f <nombre de archivo>                       (Quita lo que puso el git add y además borra el archivo de la carpeta)

git log <nombre archivo>                            (Te muestra el historial de los commits de un archivo)
git log                                             (Te muestra el historial de los commits de todos los archivos de esa carpeta)
cat <nombre archivo>                                (Te muestra el contenido del archivo)







El comando git show nos muestra los cambios que han existido sobre un archivo y es muy útil para detectar cuándo se produjeron ciertos cambios, qué se rompió y cómo lo podemos solucionar. Pero podemos ser más detallados.

Si queremos ver la diferencia entre una versión y otra, no necesariamente todos los cambios desde la creación del archivo, podemos usar el comando git diff commitA commitB.

Recuerda que puedes obtener el ID de tus commits con el comando git log.


prueba para show