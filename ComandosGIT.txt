Los comandos de Linux vistos son:

pwd: Nos muestra la ruta de carpetas en la que te encuentras ahora mismo.
mkdir: Nos permite crear carpetas (por ejemplo, mkdir Carpeta-Importante).
touch: Nos permite crear archivos (por ejemplo, touch archivo.txt).
rm: Nos permite borrar un archivo o carpeta (por ejemplo, rm archivo.txt). Mucho cuidado con este comando, puedes borrar todo tu disco duro.
cat: Ver el contenido de un archivo (por ejemplo, cat nombre-archivo.txt).
ls: Nos permite cambiar ver los archivos de la carpeta donde estamos ahora mismo. Podemos usar uno o más argumentos para ver más información sobre estos archivos (los argumentos pueden ser -- + el nombre del argumento o - + una sola letra o shortcut por cada argumento).
- ls -a: Mostrar todos los archivos, incluso los ocultos.
- ls -l: Ver todos los archivos como una lista.
cd: Nos permite navegar entre carpetas.
- cd /: Ir a la ruta principal:
- cd o cd ~: Ir a la ruta de tu usuario
- cd carpeta/subcarpeta: Navegar a una ruta dentro de la carpeta donde estamos ahora mismo.
- cd .. (cd + dos puntos): Regresar una carpeta hacia atrás.
- Si quieres referirte al directorio en el que te encuentras ahora mismo puedes usar cd . (cd + un punto).
history: Ver los últimos comandos que ejecutamos y un número especial con el que podemos repetir su ejecución.
! + número: Ejecutar algún comando con el número que nos muestra el comando history (por ejemplo, !72).
clear: Para limpiar la terminal. También podemos usar los atajos de teclado Ctrl + L o Command + L.

Recuerda que podemos descubrir todos los argumentos de un comando con el argumento --help (por ejemplo, cat --help)

--------------------------------------------------------------------------------------------------------------------------------------
Los comandos de GIT vistos son:

git init                                            (Se utiliza para crear el repositorio local, lo que sería el Master).

git config --list                                   (Muestra las configuraciones de git)
git config                                          (Muestra las configuraciones de git pero mas detalladas)
git config --global user.email "tu@email.com"       (Se usa para setear en git el mail del usuario)
git config --global user.name "Tu Nombre"           (Se usa para setear en git el nombre del usuario)
git config --list --show-origin                     (para mostrar las configuraciones y sus rutas)

Si por algún motivo te equivocaste en el nombre o email que configuraste al principio, lo puedes modificar de la siguiente manera:
git config --global --replace-all user.name “Aquí va tu nombre modificado”
O si lo deseas eliminar y añadir uno nuevo
git config --global --unset-all user.name                   (Elimina el nombre del usuario) 
git config --global --add user.name “Aquí va tu nombre”


git status                                          (Se utiliza para ver el status de los archivos con el repo)
git add <nombre archivo>                            (Te agrega solo el archivo seleccionado para poder commitearlo)
git add .                                           (Te agrega todos los archivos desde esa carpeta para poder commitearlos)
git commit -m "comentario del cambio"               (Se utiliza para commitear los cambios al repo local)


git rm --cached <nombre de archivo>                 (borra el archivo de lo que se agreg[o para subir, quita lo que pone el git add])
git rm -f <nombre de archivo>                       (Quita lo que puso el git add y además borra el archivo de la carpeta)

git log <nombre archivo>                            (Te muestra el historial de los commits de un archivo)
git log                                             (Te muestra el historial de los commits de todos los archivos de esa carpeta)
git log --stat                                      (Muestra el historia de los commita de todos los archivos con detalle del cambio)
cat <nombre archivo>                                (Te muestra el contenido del archivo)

git log --oneline - Te muestra el id commit y el título del commit.
git log --decorate- Te muestra donde se encuentra el head point en el log.
git log --stat - Explica el número de líneas que se cambiaron brevemente.
git log -p- Explica el número de líneas que se cambiaron y te muestra que se cambió en el contenido.
git shortlog - Indica que commits ha realizado un usuario, mostrando el usuario y el titulo de sus commits.
git log --graph --oneline --decorate y
git log --pretty=format:"%cn hizo un commit %h el dia %cd" - Muestra mensajes personalizados de los commits.
git log -3 - Limitamos el número de commits.
git log --after=“2018-1-2” ,
git log --after=“today” y
git log --after=“2018-1-2” --before=“today” - Commits para localizar por fechas.
git log --author=“Name Author” - Commits realizados por autor que cumplan exactamente con el nombre.
git log --grep=“INVIE” - Busca los commits que cumplan tal cual está escrito entre las comillas.
git log --grep=“INVIE” –i- Busca los commits que cumplan sin importar mayúsculas o minúsculas.
git log – index.html- Busca los commits en un archivo en específico.
git log -S “Por contenido”- Buscar los commits con el contenido dentro del archivo.
git log > log.txt - guardar los logs en un archivo txt

git show <nombre archivo>                           (Te muestra exactamente los cambios que tuvo el archivo)
git diff commitA commitB                            (Te muestra exactamente los cambios entre dos commits diferentes, los obtienes con el git log)
git diff                                            (Muestra los cambios entre el staging y lo que no se subio en disco)

git reset <#commit> --hard                          (vuelve a la version del commit indicada borrando todo el historial y todo)
git reset <#commit> --soft                          (vuelve a la version del commit indicada borrando todo el historial y todo excepto el staging)

git checkout <#commit> <Nombre Archivo>             (volves en tu local a la version de commit que pongas sin borrar nada del historial)
git checkout master <Nombre Archivo>                (volves en tu local a la utima version que habias subido al master)


git branch -nombre de la rama-: Con este comando se genera una nueva rama.
git checkout -nombre de la rama-: Con este comando puedes saltar de una rama a otra.
git checkout -b rama: Genera una rama y nos mueve a ella automáticamente, Es decir, es la combinación de git brach y git checkout al mismo tiempo.
git reset id-commit: Nos lleva a cualquier commit no importa la rama, ya que identificamos el id del tag., eliminando el historial de los commit posteriores al tag seleccionado.
git checkout rama-o-id-commit: Nos lleva a cualquier commit sin borrar los commit posteriores al tag seleccionado.


--------------------------------------------------------------------------------------------------------------------
En este ejemplo, vamos a crear un nuevo commit en la rama master combinando los cambios de una rama llamada cabecera:

git checkout master
git merge cabecera

Otra opción es crear un nuevo commit en la rama cabecera combinando los cambios de cualquier otra rama:

git checkout cabecera
git merge cualquier-otra-rama
--------------------------------------------------------------------------------------------------------------------
Github:

Mail:
marcelo.tallone@gmail.com
Pass:
A94......
User:
marcelo-tallone



GitHub es una plataforma que nos permite guardar repositorios de Git que podemos usar como servidores remotos y ejecutar algunos comandos de forma visual e interactiva (sin necesidad de la consola de comandos).

Luego de crear nuestra cuenta, podemos crear o importar repositorios, crear organizaciones y proyectos de trabajo, descubrir repositorios de otras personas, contribuir a esos proyectos, dar estrellas y muchas otras cosas.

El README.md es el archivo que veremos por defecto al entrar a un repositorio. Es una muy buena práctica configurarlo para describir el proyecto, los requerimientos y las instrucciones que debemos seguir para contribuir correctamente.

Para clonar un repositorio desde GitHub (o cualquier otro servidor remoto) debemos copiar la URL (por ahora, usando HTTPS) y ejecutar el comando git clone + la URL que acabamos de copiar. Esto descargará la versión de nuestro proyecto que se encuentra en GitHub.

Sin embargo, esto solo funciona para las personas que quieren empezar a contribuir en el proyecto.

Cómo conectar un repositorio de Github a nuestro documento local
Si queremos conectar el repositorio de GitHub con nuestro repositorio local, que creamos usando el comando git init, debemos ejecutar las siguientes instrucciones:

PGuardar la URL del repositorio de GitHub con el nombre de origin
git remote add origin URL
Verificar que la URL se haya guardado correctamente:
git remote
git remote -v
Traer la versión del repositorio remoto y hacer merge para crear un commit con los archivos de ambas partes. Podemos usar git fetch y git merge o solo git pull con el flag --allow-unrelated-histories:
git pull origin master --allow-unrelated-histories
Por último, ahora sí podemos hacer git push para guardar los cambios de nuestro repositorio local en GitHub:
git push origin master
--------------------------------------------------------------------------------------------------------------------
Para generacion de llaves:

1- Asegurarse que el user y el mail de mi repositorio local sea igual al de gitub (utilizando el comando git confitg -l)
2- Si no son iguales, con los comandos de git config modificar el git local para que coincidan.
3- Para generar las llaves ejecutar:
ssh-keygen -t rsa -b 4096 -C "marcelo.tallone@gmail.com"
luego enter para dejar las llaves en la ruta que propone
luego poner clave con espacios o apretar enter u no poner ninguna Pass. Luego de nuevo para confirmar.
4- Luego se debe encener el “servidor” de llaves SSH de tu computadora con el comando:
eval $(ssh-agent -s)
5- Añadir tu llave SSH a este “servidor” con el comando:
ssh-add ruta-donde-guardaste-tu-llave-privada
En este caso:
ssh-add ~/.ssh/id_rsa

6- Ahora ir a github, en la parte de clone, seleccionar ssh y guardar el codigo.
7- en consola escribir este comando:
git remote set-url origin url-ssh-del-repositorio-en-github
que en mi caso por ejemplo es:
$ git remote set-url origin git@github.com:marcelo-tallone/hyperblog.git
8- gacer un git pull y seleccionar "yes"

LISTO.
--------------------------------------------------------------------------------------------------------------------

Comandos para trabajar con etiquetas:
Crear un nuevo tag y asignarlo a un commit: 
git tag -a nombre-del-tag id-del-commit "descripcion del tag"

Borrar un tag en el repositorio local: 
git tag -d nombre-del-tag

Listar los tags de nuestro repositorio local: 
git tag
o 
git show-ref --tags

Publicar un tag en el repositorio remoto: 
git push origin --tags

Borrar un tag del repositorio remoto: 
git tag -d nombre-del-tag 
y
 git push origin :refs/tags/nombre-del-tag

Para generar un comando complejo con varios comandos de una forma optimizada, utilizamos conjuntos de sentencias conocidas como alias.

Cómo aregar un alias solo para git
Para un proyecto:
git config alias.arbolito "log --all --graph --decorate --oneline"
Global:
git config --global alias.arbolito "log --all --graph --decorate --oneline"
Para correrlo:
git arbolito
--------------------------------------------------------------------------------------------------------------------

Comandos para manejo de ramas en GitHub
Crear una rama:
git branch branchName
Movernos a otra rama:
git checkout branchName
Crear una rama en el repositorio local:
git branch nombre-de-la-rama o git checkout -b nombre-de-la-rama.
Publicar una rama local al repositorio remoto:
git push origin nombre-de-la-rama.
Recuerda que podemos ver gráficamente nuestro entorno y flujo de trabajo local con Git utilizando el comando gitk. 
Gitk fue el primer visor gráfico que se desarrolló para ver de manera gráfica el historial de un repositorio de Git.
--------------------------------------------------------------------------------------------------------------------
Cómo agregar colaboradores en Github
Solo debemos entrar a la configuración de colaboradores de nuestro proyecto. Se encuentra en:
Repositorio > Settings > Collaborators
Ahí, debemos añadir el email o username de los nuevos colaboradores.
--------------------------------------------------------------------------------------------------------------------
Para poder desarrollar software de manera óptima y ordenada, necesitamos tener un flujo de trabajo profesional, que nos permita trabajar en conjunto sin interrumpir el trabajo de otros desarrolladores. Una buena práctica de flujo de trabajo sería la siguiente:

Crear ramas
Asignar una rama a cada programador
El programador baja el repositorio con git pull origin master
El programador cambia de rama
El programador trabaja en esa rama y hace commits
El programador sube su trabajo con git push origin #nombre_rama
El encargado de organizar el proyecto baja, revisa y unifica todos los cambios
--------------------------------------------------------------------------------------------------------------------

Cómo se hace un fork remoto desde consola en GitHub
Al hacer un fork, GitHub sabe que se hizo el fork del proyecto, por lo que se le permite al colaborador hacer pull request desde su repositorio propio.

Cuando trabajas en un proyecto que existe en diferentes repositorios remotos (normalmente a causa de un fork), es muy probable que desees poder trabajar con ambos repositorios. Para esto, puedes generar un remoto adicional desde consola.

git remote add <nombre_del_remoto> <url_del_remoto> 
git remote upstream https://github.com/freddier/hyperblog
Al crear un remoto adicional, podremos hacer pull desde el nuevo origen. En caso de tener permisos, podremos hacer fetch y push.

git pull <remoto> <rama>
git pull upstream master
Este pull nos traerá los cambios del remoto, por lo que se estará al día en el proyecto. El flujo de trabajo cambia, en adelante se estará trabajando haciendo pull desde el upstream y push al origin para pasar a hacer pull request.

git pull upstream master
git push origin master

--------------------------------------------------------------------------------------------------------------------
